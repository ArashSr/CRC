#include <stdio.h>
#include <stdint.h>
#include <string.h>

static uint64_t crctbl[256];

int main() {
    uint64_t I[8];                  /* indexes */
    uint32_t e = 8;                 /* # of error bits */
    uint32_t i, j;
    uint64_t d;
    uint64_t crc;
    uint64_t polynomial = 0x42F0E1EBA9EA3693;  /* default polynomial */

    // Prompt and read polynomial
    char input[50];
    printf("Enter polynomial (default is 0x42F0E1EBA9EA3693): ");
    fgets(input, sizeof(input), stdin);
    input[strcspn(input, "\n")] = '\0';  // remove newline
    if(strlen(input) > 0) {
        sscanf(input, "%llx", &polynomial);
    }

    for (j = 0; j < 256; j++) { /* generate table */
        crc = (uint64_t)j << 56;
        for (i = 0; i < 8; i++) {
            crc = (crc << 1) ^ ((crc & 0x8000000000000000) ? polynomial : 0);
        }
        crctbl[j] = crc;
    }

    for (i = 0; i < e; i++)      /* init I */
        I[i] = i;

    while (1) {
        d = 0;                  /* set up pattern */
        for (i = 0; i < e; i++)
            d |= ((uint64_t)1 << (63 - I[i]));

        crc = 0;                /* reset CRC */

        for (j = 0; j < 8; j++) { /* generate crc */
            crc = crctbl[(crc ^ (d >> (j * 8))) & 0xFF];
        }
        if (crc != 0) {         /* if failed */
            // Print binary representation of the pattern
            printf("Undetected Error: Pattern= %llu (", d);
            for (int b = 63; b >= 0; b--) {
                printf("%d", (d & ((uint64_t)1 << b)) ? 1 : 0);
            }
            printf("), CRC= %llu\n", crc);
        }

        i = e - 1;              /* advance indexes */
        if (++I[i] < 64)        /*  to the next permutation */
            continue;
        --I[i];
        j = 63;
        while (I[i--] >= j--) {
            if (i == 0)         /* show progress */
                printf("Progress: %llu\n", I[0]);
            if (i == (uint32_t)(0-1))
                goto done0;
        }
        j = I[++i];
        while (i < e)
            I[i++] = ++j;
    }

done0:
    return 0;
}
